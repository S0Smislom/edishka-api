basePath: /
definitions:
  model.CreateProduct:
    properties:
      calories:
        type: integer
      carbohydrates:
        type: number
      description:
        type: string
      fats:
        type: number
      slug:
        type: string
      squirrels:
        type: number
      title:
        type: string
    required:
    - calories
    - carbohydrates
    - fats
    - slug
    - squirrels
    - title
    type: object
  model.CreateRecipe:
    properties:
      cooking_time:
        type: integer
      description:
        type: string
      difficulty_level:
        $ref: '#/definitions/model.DifficultyLevel'
      kitchen:
        description: TODO Вынести в отдельную таблицу
        type: string
      preparing_time:
        type: integer
      slug:
        type: string
      title:
        type: string
    required:
    - cooking_time
    - difficulty_level
    - kitchen
    - slug
    - title
    type: object
  model.CreateRecipeStep:
    properties:
      description:
        type: string
      ordering:
        type: integer
      photo:
        type: string
      recipeId:
        type: integer
      title:
        type: string
    required:
    - ordering
    - recipeId
    - title
    type: object
  model.CreateStepProduct:
    properties:
      amount:
        type: number
      product_id:
        type: integer
      recipe_step_id:
        type: integer
    required:
    - amount
    - product_id
    - recipe_step_id
    type: object
  model.DifficultyLevel:
    enum:
    - easy
    - normal
    - hard
    type: string
    x-enum-varnames:
    - Easy
    - Normal
    - Hard
  model.Login:
    properties:
      phone:
        type: string
    required:
    - phone
    type: object
  model.LoginConfirm:
    properties:
      code:
        type: string
      id:
        type: integer
    required:
    - code
    - id
    type: object
  model.LoginConfirmResponse:
    properties:
      access_token:
        type: string
      refresh_token:
        type: string
      user:
        $ref: '#/definitions/model.User'
    type: object
  model.LoginResponse:
    properties:
      id:
        type: integer
    type: object
  model.Product:
    properties:
      calories:
        type: integer
      carbohydrates:
        type: number
      description:
        type: string
      fats:
        type: number
      id:
        type: integer
      photo:
        type: string
      slug:
        type: string
      squirrels:
        type: number
      title:
        type: string
    type: object
  model.ProductList:
    properties:
      data:
        items:
          $ref: '#/definitions/model.Product'
        type: array
      limit:
        type: integer
      offset:
        type: integer
      total:
        type: integer
    type: object
  model.Recipe:
    properties:
      calories:
        description: Calculated fields
        type: number
      carbohydrates:
        type: number
      cooking_time:
        type: integer
      created_at:
        type: string
      created_by_id:
        type: integer
      description:
        type: string
      difficulty_level:
        $ref: '#/definitions/model.DifficultyLevel'
      fats:
        type: number
      gallery:
        items:
          $ref: '#/definitions/model.RecipeGalleryMinimal'
        type: array
      id:
        type: integer
      kitchen:
        description: TODO Вынести в отдельную таблицу
        type: string
      photo:
        type: string
      preparing_time:
        type: integer
      products:
        items:
          $ref: '#/definitions/model.RecipeProduct'
        type: array
      published:
        type: boolean
      slug:
        type: string
      squirrels:
        type: number
      title:
        type: string
      updated_at:
        type: string
      updated_by_id:
        type: integer
    type: object
  model.RecipeGallery:
    properties:
      created_at:
        type: string
      created_by_id:
        type: integer
      id:
        type: integer
      ordering:
        type: integer
      photo:
        type: string
      published:
        type: boolean
      recipe_id:
        type: integer
      updated_at:
        type: string
      updated_by_id:
        type: integer
    type: object
  model.RecipeGalleryMinimal:
    properties:
      created_at:
        type: string
      id:
        type: integer
      ordering:
        type: integer
      photo:
        type: string
      published:
        type: boolean
      updated_at:
        type: string
    type: object
  model.RecipeList:
    properties:
      data:
        items:
          $ref: '#/definitions/model.Recipe'
        type: array
      limit:
        type: integer
      offset:
        type: integer
      total:
        type: integer
    type: object
  model.RecipeProduct:
    properties:
      amount:
        type: integer
      calories:
        type: integer
      carbohydrates:
        type: number
      description:
        type: string
      fats:
        type: number
      id:
        type: integer
      photo:
        type: string
      slug:
        type: string
      squirrels:
        type: number
      title:
        type: string
    type: object
  model.RecipeStep:
    properties:
      created_at:
        type: string
      created_by_id:
        type: integer
      description:
        type: string
      id:
        type: integer
      ordering:
        type: integer
      photo:
        type: string
      recipeId:
        type: integer
      title:
        type: string
      updated_at:
        type: string
      updated_by_id:
        type: integer
    type: object
  model.RecipeStepList:
    properties:
      data:
        items:
          $ref: '#/definitions/model.RecipeStep'
        type: array
      limit:
        type: integer
      offset:
        type: integer
      total:
        type: integer
    required:
    - data
    - limit
    - offset
    - total
    type: object
  model.StepProduct:
    properties:
      amount:
        type: number
      created_at:
        type: string
      created_by_id:
        type: integer
      id:
        type: integer
      product:
        $ref: '#/definitions/model.Product'
      recipe_step_id:
        type: integer
      updated_at:
        type: string
      updated_by_id:
        type: integer
    required:
    - amount
    - product
    - recipe_step_id
    type: object
  model.StepProductList:
    properties:
      data:
        items:
          $ref: '#/definitions/model.StepProduct'
        type: array
      limit:
        type: integer
      offset:
        type: integer
      total:
        type: integer
    type: object
  model.UpdateProduct:
    properties:
      calories:
        type: integer
      carbohydrates:
        type: number
      description:
        type: string
      fats:
        type: number
      slug:
        type: string
      squirrels:
        type: number
      title:
        type: string
    type: object
  model.UpdateRecipe:
    properties:
      cooking_time:
        type: integer
      description:
        type: string
      difficulty_level:
        $ref: '#/definitions/model.DifficultyLevel'
      kitchen:
        description: TODO Вынести в отдельную таблицу
        type: string
      preparing_time:
        type: integer
      published:
        type: boolean
      slug:
        type: string
      title:
        type: string
    type: object
  model.UpdateRecipeGallery:
    properties:
      ordering:
        type: integer
      published:
        type: boolean
    type: object
  model.UpdateRecipeStep:
    properties:
      description:
        type: string
      ordering:
        type: integer
      title:
        type: string
    type: object
  model.UpdateStepProduct:
    properties:
      amount:
        type: number
    type: object
  model.UpdateUser:
    properties:
      birthday:
        type: string
      first_name:
        type: string
      last_name:
        type: string
    type: object
  model.User:
    properties:
      birthday:
        type: string
      first_name:
        type: string
      id:
        type: integer
      last_name:
        type: string
      phone:
        type: string
      photo:
        type: string
    type: object
  response.ErrorResponse:
    properties:
      detail:
        type: string
      title:
        type: string
      type:
        type: string
    type: object
host: localhost:8091
info:
  contact: {}
  description: API Server for FOOD Application
  title: Food API
  version: "1.0"
paths:
  /login:
    post:
      consumes:
      - application/json
      description: create account
      operationId: create-account
      parameters:
      - description: account info
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/model.Login'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.LoginResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: SignUp
      tags:
      - Auth
  /login/confirm:
    post:
      consumes:
      - application/json
      description: Generate access/refresh tokens
      operationId: generate-tokens
      parameters:
      - description: account info
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/model.LoginConfirm'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.LoginConfirmResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Confirm Code
      tags:
      - Auth
  /login/refresh:
    post:
      description: Generate new access/refresh tokens
      operationId: refresh-tokens
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.LoginConfirmResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Refresh token
      tags:
      - Auth
  /v1/product:
    get:
      consumes:
      - application/json
      description: Get product list
      operationId: get-product-list
      parameters:
      - default: 25
        description: limit
        in: query
        name: limit
        type: integer
      - default: 0
        description: offset
        in: query
        name: offset
        type: integer
      - in: query
        name: calories__gte
        type: integer
      - in: query
        name: calories__lte
        type: integer
      - in: query
        name: carbohydrates__gte
        type: number
      - in: query
        name: carbohydrates__lte
        type: number
      - in: query
        name: fats__gte
        type: number
      - in: query
        name: fats__lte
        type: number
      - in: query
        name: slug
        type: string
      - in: query
        name: squirrels__gte
        type: number
      - in: query
        name: squirrels__lte
        type: number
      - in: query
        name: title
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ProductList'
        default:
          description: ""
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Get product list
      tags:
      - Product
    post:
      consumes:
      - application/json
      description: Create product
      operationId: create-product
      parameters:
      - description: product info
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/model.CreateProduct'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Product'
        default:
          description: ""
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Create product
      tags:
      - Product
  /v1/product/{id}:
    delete:
      consumes:
      - application/json
      description: Delete product
      operationId: delete-product
      parameters:
      - description: Product id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Product'
        default:
          description: ""
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Delete product
      tags:
      - Product
    get:
      consumes:
      - application/json
      description: Get product by id
      operationId: get-product
      parameters:
      - description: product id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Product'
        default:
          description: ""
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Get product by id
      tags:
      - Product
    patch:
      consumes:
      - application/json
      description: Update product
      operationId: update-product
      parameters:
      - description: Product update data
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/model.UpdateProduct'
      - description: Product id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Product'
        default:
          description: ""
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Update product
      tags:
      - Product
  /v1/product/{id}/photo:
    delete:
      description: Delete product photo
      operationId: delete-product-photo
      parameters:
      - description: Product id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Product'
      security:
      - ApiKeyAuth: []
      summary: Delete photo
      tags:
      - Product
    post:
      consumes:
      - multipart/form-data
      description: Upload product photo
      operationId: upload-product-photo
      parameters:
      - description: Product id
        in: path
        name: id
        required: true
        type: integer
      - description: this is a test file
        in: formData
        name: photo
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Product'
        default:
          description: ""
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Upload photo
      tags:
      - Product
  /v1/profile:
    get:
      description: Get current user
      operationId: get-current-user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.User'
        default:
          description: ""
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get current user
      tags:
      - Profile
    patch:
      consumes:
      - application/json
      description: Update current user
      operationId: update-current-user
      parameters:
      - description: User udpate data
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/model.UpdateUser'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.User'
        default:
          description: ""
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Update current profile
      tags:
      - Profile
  /v1/profile/photo:
    delete:
      description: Delete profile photo
      operationId: delete-profile-photo
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.User'
        default:
          description: ""
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Delete photo
      tags:
      - Profile
    post:
      consumes:
      - multipart/form-data
      description: Upload profile photo
      operationId: upload-profile-photo
      parameters:
      - description: this is a test file
        in: formData
        name: photo
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.User'
        default:
          description: ""
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Upload photo
      tags:
      - Profile
  /v1/recipe:
    get:
      consumes:
      - application/json
      description: Get Recipe list
      operationId: get-recipe-list
      parameters:
      - default: 25
        description: limit
        in: query
        name: limit
        type: integer
      - default: 0
        description: offset
        in: query
        name: offset
        type: integer
      - in: query
        name: cooking_time__gte
        type: integer
      - in: query
        name: cooking_time__lte
        type: integer
      - enum:
        - easy
        - normal
        - hard
        in: query
        name: difficulty_level
        type: string
        x-enum-varnames:
        - Easy
        - Normal
        - Hard
      - in: query
        name: kitchen
        type: string
      - in: query
        name: slug
        type: string
      - in: query
        name: title
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.RecipeList'
        default:
          description: ""
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Get Recipe list
      tags:
      - Recipe
    post:
      consumes:
      - application/json
      description: Create Recipe
      operationId: create-recipe
      parameters:
      - description: Recipe info
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/model.CreateRecipe'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Recipe'
        default:
          description: ""
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Create Recipe
      tags:
      - Recipe
  /v1/recipe-gallery:
    post:
      consumes:
      - application/json
      description: Create RecipeGallery
      operationId: create-recipe-step
      parameters:
      - in: formData
        name: ordering
        type: integer
      - in: formData
        name: published
        type: boolean
      - in: formData
        name: recipe_id
        required: true
        type: integer
      - description: this is a test file
        in: formData
        name: photo
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.RecipeGallery'
        default:
          description: ""
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Create RecipeGallery
      tags:
      - RecipeGallery
  /v1/recipe-gallery/{id}:
    delete:
      consumes:
      - application/json
      description: Delete recipe gallery
      operationId: delete-recipe-gallery
      parameters:
      - description: Recipe gallery id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.RecipeGallery'
        default:
          description: ""
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Delete recipe gallery
      tags:
      - RecipeGallery
    patch:
      consumes:
      - application/json
      description: Update RecipeGallery
      operationId: update-recipe-step
      parameters:
      - description: Recipe gallery update data
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/model.UpdateRecipeGallery'
      - description: Recipe id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.RecipeGallery'
        default:
          description: ""
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Update RecipeGallery
      tags:
      - RecipeGallery
  /v1/recipe-step:
    get:
      consumes:
      - application/json
      description: Get RecipeStep list
      operationId: get-recipe-step-list
      parameters:
      - default: 25
        description: limit
        in: query
        name: limit
        type: integer
      - default: 0
        description: offset
        in: query
        name: offset
        type: integer
      - in: query
        name: recipe_id
        required: true
        type: integer
      - in: query
        name: title
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.RecipeStepList'
        default:
          description: ""
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Get Recipe Step list
      tags:
      - RecipeStep
    post:
      consumes:
      - application/json
      description: Create Recipe Step
      operationId: create-recipe-step
      parameters:
      - description: RecipeStep info
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/model.CreateRecipeStep'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.RecipeStep'
        default:
          description: ""
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Create Recipe Step
      tags:
      - RecipeStep
  /v1/recipe-step/{id}:
    delete:
      consumes:
      - application/json
      description: Delete Recipe Step
      operationId: delete-recipe-step
      parameters:
      - description: Recipe Step id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.RecipeStep'
        default:
          description: ""
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Delete Recipe Step
      tags:
      - RecipeStep
    get:
      consumes:
      - application/json
      description: Get RecipeStep by id
      operationId: get-recipe-step
      parameters:
      - description: RecipeStep id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.RecipeStep'
        default:
          description: ""
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Get RecipeStep by id
      tags:
      - RecipeStep
    patch:
      consumes:
      - application/json
      description: Update Recipe Step
      operationId: update-recipe-step
      parameters:
      - description: Recipe step update data
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/model.UpdateRecipeStep'
      - description: Recipe Step id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.RecipeStep'
        default:
          description: ""
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Update Recipe Step
      tags:
      - RecipeStep
  /v1/recipe-step/{id}/photo:
    delete:
      description: Delete RecipeStep photo
      operationId: delete-recipe-step-photo
      parameters:
      - description: RecipeStep id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.RecipeStep'
      security:
      - ApiKeyAuth: []
      summary: Delete photo
      tags:
      - RecipeStep
    post:
      consumes:
      - multipart/form-data
      description: Upload RecipeStep photo
      operationId: upload-recipe-step-photo
      parameters:
      - description: RecipeStep id
        in: path
        name: id
        required: true
        type: integer
      - description: this is a test file
        in: formData
        name: photo
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.RecipeStep'
        default:
          description: ""
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Upload photo
      tags:
      - RecipeStep
  /v1/recipe/{id}:
    delete:
      consumes:
      - application/json
      description: Delete Recipe
      operationId: delete-recipe
      parameters:
      - description: Recipe id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Recipe'
        default:
          description: ""
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Delete Recipe
      tags:
      - Recipe
    get:
      consumes:
      - application/json
      description: Get Recipe by id
      operationId: get-recipe
      parameters:
      - description: Recipe id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Recipe'
        default:
          description: ""
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Get Recipe by id
      tags:
      - Recipe
    patch:
      consumes:
      - application/json
      description: Update Recipe
      operationId: update-recipe
      parameters:
      - description: Recipe update data
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/model.UpdateRecipe'
      - description: Recipe id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Recipe'
        default:
          description: ""
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Update Recipe
      tags:
      - Recipe
  /v1/recipe/{id}/private:
    get:
      consumes:
      - application/json
      description: Get Recipe by id private
      operationId: get-recipe-private
      parameters:
      - description: Recipe id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Recipe'
        default:
          description: ""
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get Recipe by id private
      tags:
      - Recipe
  /v1/recipe/private:
    get:
      consumes:
      - application/json
      description: Get Recipe list private
      operationId: get-recipe-list-private
      parameters:
      - default: 25
        description: limit
        in: query
        name: limit
        type: integer
      - default: 0
        description: offset
        in: query
        name: offset
        type: integer
      - in: query
        name: cooking_time__gte
        type: integer
      - in: query
        name: cooking_time__lte
        type: integer
      - enum:
        - easy
        - normal
        - hard
        in: query
        name: difficulty_level
        type: string
        x-enum-varnames:
        - Easy
        - Normal
        - Hard
      - in: query
        name: kitchen
        type: string
      - in: query
        name: slug
        type: string
      - in: query
        name: title
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.RecipeList'
        default:
          description: ""
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get Recipe list private
      tags:
      - Recipe
  /v1/step-product:
    get:
      consumes:
      - application/json
      description: Get Step Product list
      operationId: get-step-product-list
      parameters:
      - default: 25
        description: limit
        in: query
        name: limit
        type: integer
      - default: 0
        description: offset
        in: query
        name: offset
        type: integer
      - in: query
        name: product_id
        type: integer
      - in: query
        name: recipe_step_id
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.StepProductList'
        default:
          description: ""
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Get Step Product list
      tags:
      - StepProduct
    post:
      consumes:
      - application/json
      description: Create Step Product
      operationId: create-step-product
      parameters:
      - description: StepProduct info
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/model.CreateStepProduct'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.StepProduct'
        default:
          description: ""
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Create Step Product
      tags:
      - StepProduct
  /v1/step-product/{id}:
    delete:
      consumes:
      - application/json
      description: Delete Step Product
      operationId: delete-step-product
      parameters:
      - description: StepProduct id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.StepProduct'
        default:
          description: ""
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Delete Step Product
      tags:
      - StepProduct
    get:
      consumes:
      - application/json
      description: Get Step Product by id
      operationId: get-step-product
      parameters:
      - description: StepProduct id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.StepProduct'
        default:
          description: ""
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Get Step Product by id
      tags:
      - StepProduct
    patch:
      consumes:
      - application/json
      description: Update StepProduct
      operationId: update-step-product
      parameters:
      - description: StepProduct update data
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/model.UpdateStepProduct'
      - description: StepProduct id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.StepProduct'
        default:
          description: ""
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Update Step Product
      tags:
      - StepProduct
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
