basePath: /
definitions:
  model.Login:
    properties:
      phone:
        type: string
    required:
    - phone
    type: object
  model.LoginConfirm:
    properties:
      code:
        type: string
      id:
        type: integer
    required:
    - code
    - id
    type: object
  model.LoginConfirmResponse:
    properties:
      access_token:
        type: string
      refresh_token:
        type: string
      user:
        $ref: '#/definitions/model.User'
    type: object
  model.LoginResponse:
    properties:
      id:
        type: integer
    type: object
  model.UpdateUser:
    properties:
      birthday:
        type: string
      first_name:
        type: string
      last_name:
        type: string
    type: object
  model.User:
    properties:
      birthday:
        type: string
      first_name:
        type: string
      id:
        type: integer
      last_name:
        type: string
      phone:
        type: string
      photo:
        type: string
    type: object
  response.ErrorResponse:
    properties:
      detail:
        type: string
    type: object
host: localhost:8091
info:
  contact: {}
  description: API Server for FOOD Application
  title: Food API
  version: "1.0"
paths:
  /login:
    post:
      consumes:
      - application/json
      description: create account
      operationId: create-account
      parameters:
      - description: account info
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/model.Login'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.LoginResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: SignUp
      tags:
      - Auth
  /login/confirm:
    post:
      consumes:
      - application/json
      description: Generate access/refresh tokens
      operationId: generate-tokens
      parameters:
      - description: account info
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/model.LoginConfirm'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.LoginConfirmResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Confirm Code
      tags:
      - Auth
  /v1/profile:
    get:
      description: Get current user
      operationId: get-current-user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.User'
        default:
          description: ""
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get current user
      tags:
      - Profile
    patch:
      consumes:
      - application/json
      description: Update current user
      operationId: update-current-user
      parameters:
      - description: User udpate data
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/model.UpdateUser'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.User'
        default:
          description: ""
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Update current profile
      tags:
      - Profile
  /v1/profile/photo:
    delete:
      description: Delete profile photo
      operationId: delete-profile-photo
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.User'
        default:
          description: ""
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Delete photo
      tags:
      - Profile
    post:
      consumes:
      - multipart/form-data
      description: Upload profile photo
      operationId: upload-profile-photo
      parameters:
      - description: this is a test file
        in: formData
        name: photo
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.User'
        default:
          description: ""
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Upload photo
      tags:
      - Profile
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
